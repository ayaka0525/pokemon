{"ast":null,"code":"var _jsxFileName = \"/Users/w/my-projects/pokemon/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { getAllPokemon, getPokemon } from './utils/pokemon';\nimport Card from './components/Card/Card';\nimport Navbar from './components/Navbar/Navbar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // ポケモンAPIのエンドポイントURLを変数に格納\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon\";\n  const [loading, setLoading] = useState(true);\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextURL, setNextURL] = useState(\"\");\n  const [prevURL, setPrevURL] = useState(\"\");\n\n  // useEffectフックを使用して、コンポーネントの最初のレンダリング時にAPIを呼び出す\n  useEffect(() => {\n    // APIからポケモンデータを取得する非同期関数\n    const fetchPokemonData = async () => {\n      //全てのポケモンデータを取得\n      let res = await getAllPokemon(initialURL);\n      //各ポケモンの詳細なデータを取得\n      loadPokemon(res.results);\n      setNextURL(res.next);\n      setPrevURL(res.previous);\n      setLoading(false);\n    };\n    // 関数を実行\n    fetchPokemonData(); // 非同期関数の呼び出し\n  }, []); // 空の依存配列で、コンポーネントの初回レンダリング時のみ実行\n\n  // 非同期関数 loadPokemon：ポケモンデータを取得するための関数\n  const loadPokemon = async data => {\n    // Promise.allを使って、すべてのポケモンデータを同時に取得\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      // 各ポケモンのURLを元にポケモンデータを取得\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord; // 取得したデータを返す\n    }));\n    setPokemonData(_pokemonData);\n  };\n  // pokemonDataが更新される前にコンソールログを表示（初期値の確認などに使うことがある）\n  // console.log(pokemonData);\n\n  const handleNextPage = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextURL);\n    // console.log(data);\n    await loadPokemon(data.results);\n    setNextURL(data.next);\n    setLoading(false);\n  };\n  const handlePrevPage = () => {\n    setLoading(ture);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u30ED\\u30FC\\u30C9\\u4E2D\\u30FB\\u30FB\\u30FB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pokemonCardContainer\",\n          children: pokemonData.map((pokemon, i) => {\n            // 各ポケモンに対して「Card」コンポーネントを描画し、keyにはインデックス「i」を使用\n            return /*#__PURE__*/_jsxDEV(Card, {\n              pokemon: pokemon\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 20\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          on: true,\n          onClick: handlePrevPage,\n          children: \"\\u524D\\u3078\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          children: \"\\u6B21\\u3078\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"Gv5Px5pDiBXyCxiI0tNzlhJUYVA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","getAllPokemon","getPokemon","Card","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","initialURL","loading","setLoading","pokemonData","setPokemonData","nextURL","setNextURL","prevURL","setPrevURL","fetchPokemonData","res","loadPokemon","results","next","previous","data","_pokemonData","Promise","all","map","pokemon","pokemonRecord","url","handleNextPage","handlePrevPage","ture","children","fileName","_jsxFileName","lineNumber","columnNumber","className","i","on","onClick","_c","$RefreshReg$"],"sources":["/Users/w/my-projects/pokemon/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport { getAllPokemon, getPokemon } from './utils/pokemon';\nimport Card from './components/Card/Card';\nimport Navbar from './components/Navbar/Navbar';\n\nfunction App() {\n  // ポケモンAPIのエンドポイントURLを変数に格納\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon\";\n  const [loading, setLoading] = useState(true);\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextURL, setNextURL] = useState(\"\");\n  const [prevURL, setPrevURL] = useState(\"\");\n\n\n   // useEffectフックを使用して、コンポーネントの最初のレンダリング時にAPIを呼び出す\n  useEffect (() => {\n    // APIからポケモンデータを取得する非同期関数\n    const fetchPokemonData = async () => {\n      //全てのポケモンデータを取得\n      let res = await getAllPokemon(initialURL);\n      //各ポケモンの詳細なデータを取得\n      loadPokemon(res.results);\n      setNextURL(res.next);\n      setPrevURL(res.previous);\n      setLoading(false);\n    };\n    // 関数を実行\n    fetchPokemonData(); // 非同期関数の呼び出し\n\n\n\n\n  }, []);// 空の依存配列で、コンポーネントの初回レンダリング時のみ実行\n\n// 非同期関数 loadPokemon：ポケモンデータを取得するための関数\n  const loadPokemon = async (data) => {\n  // Promise.allを使って、すべてのポケモンデータを同時に取得\n  let _pokemonData = await Promise.all(\n    data.map(async(pokemon) => {\n // 各ポケモンのURLを元にポケモンデータを取得\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord;// 取得したデータを返す\n    })\n\n  );\n  setPokemonData(_pokemonData);\n};\n// pokemonDataが更新される前にコンソールログを表示（初期値の確認などに使うことがある）\n// console.log(pokemonData);\n\nconst handleNextPage = async () => {\n  setLoading(true);\n  let data = await getAllPokemon(nextURL);\n  // console.log(data);\n  await loadPokemon(data.results);\n  setNextURL(data.next);\n  setLoading(false);\n};\nconst handlePrevPage = () => {\n  setLoading(ture);\n};\n\n  return (\n    <>\n    <Navbar />\n    <div className=\"App\">\n       {/* ローディング中は「ロード中...」を表示 */}\n      {loading ? (\n        <h1>ロード中・・・</h1>\n      ) : (\n        <div>\n            {/* ポケモンのカードを表示するコンテナ */}\n        <div className=\"pokemonCardContainer\">\n           {/* pokemonDataの各要素（ポケモン）に対して、カードを描画 */}\n          {pokemonData.map((pokemon, i) => {\n            // 各ポケモンに対して「Card」コンポーネントを描画し、keyにはインデックス「i」を使用\n            return <Card key={i} pokemon={pokemon} />;\n          })}\n        </div>\n        </div>\n      )}\n      <div className='btn'>\n      <button on onClick={handlePrevPage}>前へ</button>\n      <button onClick={handleNextPage}>次へ</button>\n\n    </div>\n\n    </div>\n\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}