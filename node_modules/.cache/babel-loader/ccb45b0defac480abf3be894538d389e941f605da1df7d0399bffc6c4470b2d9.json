{"ast":null,"code":"var _jsxFileName = \"/Users/w/my-projects/pokemon/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { getAllPokemon, getPokemon } from './utils/pokemon';\nimport Card from './components/Card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // ポケモンAPIのエンドポイントURLを変数に格納\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon\";\n  const [loading, setLoading] = useState(true);\n  const [pokemonData, setPokemonData] = useState([]);\n\n  // useEffectフックを使用して、コンポーネントの最初のレンダリング時にAPIを呼び出す\n  useEffect(() => {\n    // APIからポケモンデータを取得する非同期関数\n    const fetchPokemonData = async () => {\n      //全てのポケモンデータを取得\n      let res = await getAllPokemon(initialURL);\n      //各ポケモンの詳細なデータを取得\n      loadPokemon(res.results);\n      // console.log(res.results);\n      setLoading(false);\n    };\n    // 関数を実行\n    fetchPokemonData(); // 非同期関数の呼び出し\n  }, []); // 空の依存配列で、コンポーネントの初回レンダリング時のみ実行\n\n  // 非同期関数 loadPokemon：ポケモンデータを取得するための関数\n  const loadPokemon = async data => {\n    // Promise.allを使って、すべてのポケモンデータを同時に取得\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      // 各ポケモンのURLを元にポケモンデータを取得\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord; // 取得したデータを返す\n    }));\n    setPokemonData(_pokemonData);\n  };\n  // pokemonDataが更新される前にコンソールログを表示（初期値の確認などに使うことがある）\n  console.log(pokemonData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u30ED\\u30FC\\u30C9\\u4E2D\\u30FB\\u30FB\\u30FB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pokemonCardContainer\",\n        children: pokemonData.map((pokemon, i) => {\n          // 各ポケモンに対して「Card」コンポーネントを描画し、keyにはインデックス「i」を使用\n          return /*#__PURE__*/_jsxDEV(Card, {\n            pokemon: pokemon\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NuUXVg4RiTy+KvRtBsKPXVdgBJM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","getAllPokemon","getPokemon","Card","jsxDEV","_jsxDEV","App","_s","initialURL","loading","setLoading","pokemonData","setPokemonData","fetchPokemonData","res","loadPokemon","results","data","_pokemonData","Promise","all","map","pokemon","pokemonRecord","url","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","i","_c","$RefreshReg$"],"sources":["/Users/w/my-projects/pokemon/src/App.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport { getAllPokemon, getPokemon } from './utils/pokemon';\nimport Card from './components/Card/Card';\n\nfunction App() {\n  // ポケモンAPIのエンドポイントURLを変数に格納\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon\";\n  const [loading, setLoading] = useState(true);\n  const [pokemonData, setPokemonData] = useState([]);\n\n\n   // useEffectフックを使用して、コンポーネントの最初のレンダリング時にAPIを呼び出す\n  useEffect (() => {\n    // APIからポケモンデータを取得する非同期関数\n    const fetchPokemonData = async () => {\n      //全てのポケモンデータを取得\n      let res = await getAllPokemon(initialURL);\n      //各ポケモンの詳細なデータを取得\n      loadPokemon(res.results);\n      // console.log(res.results);\n      setLoading(false);\n    };\n    // 関数を実行\n    fetchPokemonData(); // 非同期関数の呼び出し\n\n\n\n\n  }, []);// 空の依存配列で、コンポーネントの初回レンダリング時のみ実行\n\n// 非同期関数 loadPokemon：ポケモンデータを取得するための関数\n  const loadPokemon = async (data) => {\n  // Promise.allを使って、すべてのポケモンデータを同時に取得\n  let _pokemonData = await Promise.all(\n    data.map(async(pokemon) => {\n // 各ポケモンのURLを元にポケモンデータを取得\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord;// 取得したデータを返す\n    })\n\n  );\n  setPokemonData(_pokemonData);\n};\n// pokemonDataが更新される前にコンソールログを表示（初期値の確認などに使うことがある）\nconsole.log(pokemonData);\n\n  return (\n    <div className=\"App\">\n       {/* ローディング中は「ロード中...」を表示 */}\n      {loading ? (\n        <h1>ロード中・・・</h1>\n      ) : (\n        <div>\n            {/* ポケモンのカードを表示するコンテナ */}\n        <div className=\"pokemonCardContainer\">\n           {/* pokemonDataの各要素（ポケモン）に対して、カードを描画 */}\n          {pokemonData.map((pokemon, i) => {\n            // 各ポケモンに対して「Card」コンポーネントを描画し、keyにはインデックス「i」を使用\n            return <Card key={i} pokemon={pokemon} />;\n          })}\n        </div>\n        </div>\n      )}\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,WAAW;AAClB,SAASC,aAAa,EAAEC,UAAU,QAAQ,iBAAiB;AAC3D,OAAOC,IAAI,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAMC,UAAU,GAAG,mCAAmC;EACtD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAGjD;EACDD,SAAS,CAAE,MAAM;IACf;IACA,MAAMc,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC;MACA,IAAIC,GAAG,GAAG,MAAMb,aAAa,CAACO,UAAU,CAAC;MACzC;MACAO,WAAW,CAACD,GAAG,CAACE,OAAO,CAAC;MACxB;MACAN,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IACD;IACAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAKtB,CAAC,EAAE,EAAE,CAAC,CAAC;;EAET;EACE,MAAME,WAAW,GAAG,MAAOE,IAAI,IAAK;IACpC;IACA,IAAIC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAClCH,IAAI,CAACI,GAAG,CAAC,MAAMC,OAAO,IAAK;MAC9B;MACK,IAAIC,aAAa,GAAG,MAAMrB,UAAU,CAACoB,OAAO,CAACE,GAAG,CAAC;MACjD,OAAOD,aAAa,CAAC;IACvB,CAAC,CAEH,CAAC;IACDX,cAAc,CAACM,YAAY,CAAC;EAC9B,CAAC;EACD;EACAO,OAAO,CAACC,GAAG,CAACf,WAAW,CAAC;EAEtB,oBACEN,OAAA;IAAKsB,SAAS,EAAC,KAAK;IAAAC,QAAA,EAEjBnB,OAAO,gBACNJ,OAAA;MAAAuB,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAEhB3B,OAAA;MAAAuB,QAAA,eAEAvB,OAAA;QAAKsB,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAElCjB,WAAW,CAACU,GAAG,CAAC,CAACC,OAAO,EAAEW,CAAC,KAAK;UAC/B;UACA,oBAAO5B,OAAA,CAACF,IAAI;YAASmB,OAAO,EAAEA;UAAQ,GAApBW,CAAC;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAqB,CAAC;QAC3C,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEE,CAAC;AAEV;AAACzB,EAAA,CA9DQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAgEZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}